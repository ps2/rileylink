

dim tmp(2)
dim spi_in_buf(255)
dim spi_in_buf_len
dim spi_out_buf(255)
dim spi_out_buf_len
# 1 = waiting for ble client to read bytes from data attr.
# We halt spi comms until this happens. Crude flow control.
dim waiting_for_client
dim slave_bytes_avail
dim spi_xfer_size
dim spi_batch_size
dim spi_batch_offset
dim name(32)
dim name_len
dim result
dim channel
dim continue
dim escaping
dim bytes_to_send
dim tlen
dim idx
dim response_count
dim expected_length
dim send_idx
dim chunk_size
dim in_spi
dim timer_tick_count
dim timer_update_count
dim led_mode

#variable to save handle
dim batconn_handle

#store battery measurement result
dim batresult

event system_boot(major,minor,patch,build,ll_version,protocol,hw)
  batconn_handle=$ff
  name_len=0
  response_count=0
  in_spi=0
  led_mode=0

  call flash_ps_load($8000)(result, name_len, name(0:name_len))
  if result != 0 then
    name_len = 9
    name(0:1) = $52 # R
    name(1:1) = $69 # i
    name(2:1) = $6c # l
    name(3:1) = $65 # e
    name(4:1) = $79 # y
    name(5:1) = $4c # L
    name(6:1) = $69 # i
    name(7:1) = $6e # n
    name(8:1) = $6b # k
  end if

  #start advertising in connectible mode
  call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)

  # Make P0_0 and P0_4 outputs
  call hardware_io_port_config_direction(0, $13)

  # Turn P0_0 (green led) and P0_1 (blue led) off
  call hardware_io_port_write(0, $3, 0)

  # Init output buffer
  memset(spi_out_buf(0), $11, 255)

  call attributes_write(xgatt_name, 0, name_len, name(0:name_len))
  call attributes_write(xgatt_custom_name, 0, name_len, name(0:name_len))

  # Start ~50ms timer
  call hardware_set_soft_timer($666, 1, 0)
end

procedure set_data_led(value)
  if led_mode != 0 then
    if value = 1 then
      call hardware_io_port_write(0, $2, $2)
    else
      call hardware_io_port_write(0, $2, 0)
    end if
  end if
end

procedure set_led_mode(value)
  if value = 0 then
    call hardware_io_port_write(0, $2, 0)
  end if
  led_mode = value
end

procedure do_spi()
  in_spi = 1
  call hardware_io_port_write(0, $10, 0)

  # Do not send length byte at beginning of spi_out_buf
  if spi_out_buf_len > 0 then
    spi_out_buf_len = spi_out_buf_len - 1
  end if

  tmp(0:1) = $99
  tmp(1:1) = spi_out_buf_len
  call hardware_spi_transfer(0,2,tmp(0:2))(result,channel,tlen,tmp(0:2))
  slave_bytes_avail = tmp(1:1)
  spi_xfer_size = slave_bytes_avail
  if spi_out_buf_len > spi_xfer_size then
    spi_xfer_size = spi_out_buf_len
  end if

  spi_batch_size = spi_xfer_size
  spi_batch_offset = 0
  if spi_batch_size > 10 then
    spi_batch_size = 10
  end if

  while spi_batch_size > 0
    call hardware_spi_transfer(0,spi_batch_size,spi_out_buf(spi_batch_offset+1:spi_batch_size))(result,channel,tlen,spi_in_buf(spi_batch_offset:spi_batch_size))
    spi_batch_offset = spi_batch_offset + spi_batch_size
    spi_batch_size = spi_xfer_size - spi_batch_offset
    if spi_batch_size > 10 then
      spi_batch_size = 10
    end if
  end while

  memset(spi_out_buf(0), $11, spi_out_buf_len)
  spi_out_buf_len = 0
  spi_in_buf_len = slave_bytes_avail

  call hardware_io_port_write(0, $10, $10)

  if slave_bytes_avail > 0 then
    waiting_for_client = 1
    response_count = response_count + 1
    call attributes_write(xgatt_response_count,0,1,response_count)
    call set_data_led(1)
  end if

  in_spi = 0
end

event attributes_value(connection, reason, handle, offset, value_len, value_data)

  if handle = xgatt_custom_name then
    memcpy(name(0), value_data(0), value_len)
    name_len = value_len
    call connection_disconnect(connection)
  end if

  if handle = xgatt_data then
    if offset = 0 then
      expected_length = value_data(0:1) + 1
    end if
    spi_out_buf(offset:value_len) = value_data(0:value_len)

    # Write to SPI if finished
    if offset + value_len = expected_length then
      spi_out_buf_len = expected_length
      if waiting_for_client != 1 && in_spi = 0
        call do_spi()
      end if
    end if
  end if

  if handle = xgatt_led_mode then
    call set_led_mode(value_data(0:1))
  end if

  if reason = 2 then # User requesting response
    call attributes_user_write_response(connection, 0)
  end if
end

event attributes_user_read_request(connection, handle, offset, maxsize)
  if handle = xgatt_battery then
    batconn_handle=connection
    #start measurement, read VDD/3, 9 effective bits
    call hardware_adc_read(15,3,0)
  end if

  if handle = xgatt_data then

    if waiting_for_client = 1 then
      bytes_to_send = spi_in_buf_len - offset
      if bytes_to_send > maxsize then
        bytes_to_send = maxsize
      end if
      call attributes_user_read_response(connection,0,bytes_to_send,spi_in_buf(offset:bytes_to_send))
      if offset + maxsize > spi_in_buf_len then
        waiting_for_client = 0
      end if
    else
      # No data to send
      waiting_for_client = 0
      call attributes_user_read_response(connection,0,0,spi_in_buf(0:0))
    end if

    if waiting_for_client = 0
      call set_data_led(0)
    end if


  end if

  if handle = xgatt_led_mode then
    call hardware_io_port_write(0, $10, $10)
    call attributes_user_read_response(connection,0,1,led_mode)
  end if

end

event hardware_adc_result(input,value)
  #scale value to range 0-100
  #measurement range is 32768=1.15v*3=3.45V
  #new battery ADC measurement is 32767=3.45v
  #minimum battery voltage is 2.0 volts=2.0v/3.45v*32768= 18996
  #32767-18996=13771

  batresult=(value-18995)*100/13772

  #clip to 100%
  if batresult>100 then
    batresult=100
  end if
  if batresult<0 then
    batresult=0
  end if

  tmp(0:1)=batresult

  if batconn_handle<$ff then
    #if connection handle is valid
    call attributes_user_read_response(batconn_handle,0,1,tmp(0:1))
    batconn_handle=$ff
  end if
end

# Timer event listener to poll data from spi
event hardware_soft_timer(handle)
  if waiting_for_client != 1 && in_spi = 0
    call do_spi()
  end if

  timer_tick_count = timer_tick_count + 1
  # 1200 ticks of a 50ms timer is ~1min
  if timer_tick_count > 1200
    timer_tick_count = 0
    timer_update_count = timer_update_count + 1
    call attributes_write(xgatt_timer_tick,0,1,timer_update_count)
  end if
end


# Connection event listener
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
  # Device is connected. Turn on green led
  call hardware_io_port_write(0, $1, $1)

  # Drop any data what was waiting to go to client from
  # previous connection.
  waiting_for_client = 0
  spi_in_buf_len = 0
  slave_bytes_avail = 0

end

event connection_disconnected(handle,res)
  #start advertising again after disconnection
  call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
  # Device disconnected. Turn off green led
  call hardware_io_port_write(0, $1, $0)

  # Save name
  if name_len > 0
    call attributes_write(xgatt_name, 0, name_len, name(0:name_len))
    call flash_ps_save($8000, name_len, name(0:name_len))
  end if

end
